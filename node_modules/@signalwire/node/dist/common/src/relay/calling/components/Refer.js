"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseComponent_1 = require("./BaseComponent");
const relay_1 = require("../../../util/constants/relay");
const Event_1 = __importDefault(require("../Event"));
class Refer extends BaseComponent_1.BaseComponent {
    constructor(call, params) {
        super(call);
        this.call = call;
        this.params = params;
        this.eventType = relay_1.CallNotification.Refer;
        this.method = relay_1.CallMethod.Refer;
        this.controlId = this.call.tag;
    }
    get payload() {
        const tmp = {
            node_id: this.call.nodeId,
            call_id: this.call.id,
            device: {
                type: 'sip',
                params: this.params
            }
        };
        return tmp;
    }
    notificationHandler(params) {
        this.state = params.state;
        this.referTo = params.sip_refer_to;
        this.referResponseCode = params.sip_refer_response_code;
        this.referNotifyCode = params.sip_notify_response_code;
        this.completed = this.state !== relay_1.CallReferState.InProgress;
        if (this.completed) {
            this.successful = this.state === relay_1.CallReferState.Success;
            this.event = new Event_1.default(this.state, params);
        }
        if (this._hasBlocker() && this._eventsToWait.includes(this.state)) {
            this.blocker.resolve();
        }
    }
}
exports.Refer = Refer;
